" -------- General --------------------------------------------------------

set runtimepath=~/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,~/.vim/after
set grepprg=grep\ -nH\ $*
set mouse=a
filetype plugin indent on
set bs=2 " allow backspace on old text
let mapleader = ","
let maplocalleader = ","
"set matchpairs=(:),{:},[:] " fix slow performance in .erb templates

" visual options
set number
syntax on
colorscheme ron
set t_Co=8 " disable 256-color support
set colorcolumn=79
"highlight ColorColumn ctermbg=lightgrey guibg=lightgray

" show spacing visually
set list listchars=tab:»·,trail:·,extends:$,nbsp:=

" tab options
nmap <C-H> :tabprev<CR>
nmap <C-L> :tabnext<CR>

" set searching
set hlsearch
" Press Space to turn off highlighting and clear any message already displayed.
nnoremap <silent> <Enter> :nohlsearch<Bar>:echo<CR>

" return to last line and character in file when opened
:au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

" insert date
iab dts <C-R>=strftime("%c")<CR>

" automatically give executable permissions if file begins with #!
" and contains '/bin/' in the path
au BufWritePost * if getline(1) =~ "^#!" | if getline(1) =~ "/bin/" | silent !chmod a+x <afile>

" search for Google contacts
imap <C-F> <ESC>:r!google-contacts-lookup <cword><CR><ESC>

" thesaurus searching
set thesaurus+=~/.vim/mthesaur.txt

" set tab width in spaces
command! -nargs=1 Tab call s:SetTabs('<args>')
function s:SetTabs(width)
  exec "set tabstop=" . a:width
  exec "set shiftwidth=" . a:width
  exec "set softtabstop=" . a:width
  exec "set expandtab"
endfunction

" allow toggling of insert-paste mode
set pastetoggle=<F2>

" -------- Prolog --------------------------------------------------------

"autocmd BufNewFile,BufRead ~/school/cs312/*.pl set filetype=prolog
"autocmd BufNewFile,BufRead ~/school/cs312/*/*.pl set filetype=prolog

" -------- Haskell -------------------------------------------------------

autocmd BufRead,BufNewFile *.hs,*.lhs set tabstop=4 shiftwidth=4 smarttab expandtab softtabstop=4 autoindent

" -------- Python --------------------------------------------------------

autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd BufRead,BufNewFile *.py,*.html set tabstop=4 shiftwidth=4 smarttab expandtab softtabstop=4 autoindent
autocmd BufRead,BufNewFile *.py,*.html set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class  
autocmd BufWritePre *.py normal m`:%s/\s\+$//e ``

set tags+=$HOME/.vim/tags/python.ctags

"python << EOF
"import os
"import sys
"import vim
"for p in sys.path:
"    if os.path.isdir(p):
"        vim.command(r"set path+=%s" % (p.replace(" ", r"\ ")))
"EOF

" -------- PHP ----------------------------------------------------------

autocmd BufReadPost *.php,*.module,*.install,*.theme,*.test set syntax=php filetype=php
autocmd BufReadPost *.php,*.module,*.install,*.theme,*.test Tab 2

" -------- Python -------------------------------------------------------

autocmd BufReadPost *.rb,*.erb Tab 2

" -------- Erlang -------------------------------------------------------

autocmd BufReadPost *.erl Tab 2

" -------- LaTeX --------------------------------------------------------

" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" " 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" " The following changes the default filetype back to 'tex':
au BufEnter *.tex set autowrite "Save before making PDF"
let g:tex_flavor = 'latex'
let g:Tex_ViewRule_dvi = 'evince'
let g:Tex_ViewRule_ps = 'evince'
let g:Tex_ViewRule_pdf = 'evince'
let g:Tex_DefaultTargetFormat = 'pdf'
let g:Tex_MultipleCompileFormats = 'dvi,ps,pdf'
let g:Tex_FormatDependency_pdf = 'dvi,ps,pdf'
let g:Tex_CompileRule_dvi = 'latex --interaction=nonstopmode $*'
let g:Tex_CompileRule_ps = 'dvips -Ppdf -t letter -o $*.ps $*.dvi'
let g:Tex_CompileRule_pdf = 'dvipdf $*.dvi'
"let g:Tex_CompileRule_pdf = 'pdflatex --interaction=nonstopmode $*'
"let g:Tex_CompileRule_pdf = 'ps2pdf $*.ps'

" -------- VimOutliner --------------------------------------------------

au! BufRead,BufNewFile *.otl set filetype=vo_base nolist

" -------- ctags/taglist ------------------------------------------------

" don't show variables for php!
let tlist_php_settings = 'php;c:class;f:function'
" let Tlist_Sort_Type = "name"
nmap <F3> :TlistToggle<cr>
" allow file to be open without saving
set hidden

" -------- mutt/address book --------------------------------------------

au FileType mail call MuttMode()
function! MuttMode()
    " It seems that when you've started completion, vim chooses to ignore
    " these mappings. That means we can simply 'invoke' the preferred
    " completion method and then C-n and C-p will behave as they should while
    " the menu is present
    ino <C-n> <C-X><C-U>
    ino <C-p> <C-X><C-U>

    fun! GoobookCompleteFn(findstart, base)
        if a:findstart
            " locate the start of the word
            let line = getline('.')
            let start = col('.') - 1
            while start > 0 && line[start - 1] =~ '[^:,]'
              let start -= 1
            endwhile
            while start < col('.') && line[start] =~ '[:, ]'
                let start += 1
            endwhile
            return start
        else
            let res = []
            let query = substitute(a:base, '"', '', 'g')
            let query = substitute(query, '\s*<.*>\s*', '', 'g')
            for m in split(system("google-contacts-lookup " . shellescape(query)), "\n")
                call add(res, m)
            endfor
            return res
        endif
    endfun

    set completefunc=GoobookCompleteFn
endfunction

" -------- Vundle packages ----------------------------------------------

" to install:
" git clone http://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
" cd ~/.vim/bundle/vundle && git checkout -b v origin/v
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'
Bundle 'scrooloose/nerdtree'
Bundle 'godlygeek/tabular'
Bundle 'tpope/vim-fugitive'
Bundle 'SudoEdit.vim'
"Bundle 'vimoutliner/vimoutliner'
" from color-fix branch:
Bundle 'tlvince/vimoutliner', {'v': 'c8904c8f9b'}

" W writes with sudo privileges
command W SudoWrite

" NERDTree bindings
" guarantees that the NERDTrees for all tabs will be one and the same (maybe?)
nnoremap <silent> <C-B> :NERDTreeToggle \| :silent NERDTreeMirror<CR>
